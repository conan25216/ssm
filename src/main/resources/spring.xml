<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation=
               "http://www.springframework.org/schema/beans
 			      http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    				http://www.springframework.org/schema/context
    				http://www.springframework.org/schema/context/spring-context-4.1.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd">


    <context:property-placeholder
            location="
                classpath*:config.properties,
                classpath*:configuration.properties"
            ignore-unresolvable="true"/>

    <!-- 定义在加载某个Bean前后调用的逻辑-->
    <!--<bean id="refBeanPostProcessor" class="RefBeanPostProcessor"/>-->

    <!-- 使得被加载的Bean被代理后，仍然能够通过context.getBean()获取到。 注意，必须导入cglib.jar-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 扫描并加载Service层注解了的@Service,@Component等的类, 支持通配符*和**,逗号分隔多个包路径 -->
    <!--include-filter & exclude-filter see http://docs.spring.io/spring/docs/3.0.0.M4/reference/html/ch03s10.html-->
    <context:component-scan base-package="org.sample.ssm.biz"/>
    <context:component-scan base-package="org.sample.ssm.common.dal"/>


    <!-- 配置MyBatis session工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>

        <!-- 对应实体类所在的包，将自动取对应包中不包括包名的简单类名作为带包名的别名 -->
        <property name="typeAliasesPackage" value="org.sample.ssm.web.vo
                                                  ,org.sample.ssm.common.po"/>

        <!-- 载入mybatis配置 -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <!--<property name="mapperLocations" value="classpath*:org/sample/ssm/**/mapper/*.xml"/>-->
    </bean>

    <!-- 事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 第一种方式: 注解方式配置事物 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 第二种方式: 定义拦截器方式的事务 -->
    <!--
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>

            <tx:method name="find*" propagation="SUPPORTS" rollback-for="Exception"/>

            <tx:method name="*" propagation="NOT_SUPPORTED"/>

        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.xxx.xxx.service.*Service.*(..))"/>
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
    -->

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.sample.ssm.common.dal"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 扫描并加载 basePackage下的DAO/Mapper接口 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!-- 连接池最小空闲量 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 配置获取连接最长等待超时的时间 -->
        <property name="maxWait" value="50000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 180秒，也就是3分钟 -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 关闭abandon连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
        <!-- 监控数据库 -->
        <property name="filters" value="mergeStat"/>
        <!-- 连接闲置时验证有效性 -->
        <property name="testWhileIdle" value="true"/>
        <!--testOnBorrow和testOnReturn在生产环境一般不开启，主要是性能考虑。失效连接主要通过testWhileIdle保证，如果获取到了不可用的数据库连接，一般由应用处理异常-->
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 验证连接仍然保持的请求sql -->
        <property name="validationQuery" value="select 1"/>
    </bean>

</beans>
