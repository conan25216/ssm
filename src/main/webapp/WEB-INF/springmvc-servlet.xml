<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"
       default-lazy-init="false">


    <!-- 所有以/resources路径开头的请求都会由应用程序根目录下的/resources目录提供服务 -->
    <!--<mvc:resources mapping="/ace/html/**" location="/ace/html/" />-->

    <mvc:default-servlet-handler/>

    <import resource="classpath*:env-config.xml"/>

    <context:property-placeholder
            location="
                classpath*:config.properties,
                classpath*:configuration.properties"/>

    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <!-- 出于安全的考虑, 应该将JSP放WEB-INF -->
        <property name="prefix" value="/WEB-INF/"/>
        <!--<property name="suffix" value=".jsp"/>-->
    </bean>

    <!-- 扫描并加载control层的类 -->
    <context:component-scan base-package="org.sample.ssm.web"/>

    <!-- fastJson配置类 -->
    <bean id="fastJsonConfig" class="com.alibaba.fastjson.support.config.FastJsonConfig">
        <!-- Default charset -->
        <property name="charset" value="UTF-8"/>
        <!-- Default dateFormat -->
        <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss"/>
        <!-- Feature -->
        <!-- 字段解读 http://blog.csdn.net/zgmzyr/article/details/8478563 -->
        <!--<property name="features">-->
        <!--<list>-->
        <!--<value>Your feature</value>-->
        <!--</list>-->
        <!--</property>-->
        <!--SerializerFeature -->
        <property name="serializerFeatures">
            <list>
                <value>WriteMapNullValue</value>
                <value>WriteEnumUsingToString</value>
            </list>
        </property>
        <!--Global SerializeFilter -->
        <!--<property name="serializeFilters">-->
        <!--<list>-->
        <!--<ref bean="Your serializer filter"/>-->
        <!--</list>-->
        <!--</property>-->
        <!-- Class Level SerializeFilter -->
        <!--<property name="classSerializeFilters">-->
        <!--<map>-->
        <!--<entry key="Your filter class" value-ref="Your serializer filter"/>-->
        <!--</map>-->
        <!--</property>-->
    </bean>

    <mvc:annotation-driven>
        <!-- 适用于直接返回对象的时候 -->
        <mvc:message-converters>
            <!-- 配置文档https://github.com/alibaba/fastjson/wiki/FastJsonHttpMessageConverter_CN -->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <!-- MediaTypes -->
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value><!-- 避免IE出现下载JSON文件的情况 -->
                    </list>
                </property>
                <!-- FastJsonConfig -->
                <property name="fastJsonConfig" ref="fastJsonConfig"/>
            </bean>

            <!-- 指定返回内容的编码 -->
            <bean id="stringHttpMessageConverter"
                  class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" index="0"></constructor-arg>
                <!-- 避免出现乱码 -->
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 文件上传配置 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
        <property name="maxUploadSize">
            <value>20000000</value> <!-- 20M-->
        </property>
        <property name="maxInMemorySize">
            <value>40960</value>
        </property>
    </bean>

    <mvc:interceptors>
    <!-- 性能统计 -->
    <bean class="org.sample.ssm.web.interceptor.PerformanceInterceptor"/>
    <!-- 配置拦截 -->
    <!--<mvc:interceptor>-->
        <!--<mvc:mapping path="/**"/>-->
        <!--<mvc:exclude-mapping path="/api/**"/>-->
        <!--&lt;!&ndash; 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 &ndash;&gt;-->
        <!--<bean class="com.xxx"/>-->
    <!--</mvc:interceptor>-->
    </mvc:interceptors>

</beans>
